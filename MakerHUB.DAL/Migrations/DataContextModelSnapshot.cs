// <auto-generated />
using System;
using MakerHUB.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MakerHUB.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MakerHUB.DAL.Entities.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Image")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            Date = new DateTime(2022, 12, 20, 10, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6965),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6967),
                            Description = "Ramassage des déchets",
                            Image = "501e6d67-633a-6d63-4917-71cfd39c1207",
                            IsPublic = false,
                            Latitude = 50.457441247787578,
                            Longitude = 4.8709311693713362,
                            Title = "Rue van Opré à Jambes",
                            UserId = 1
                        },
                        new
                        {
                            ActivityId = 2,
                            Date = new DateTime(2022, 12, 27, 10, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6975),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6976),
                            Description = "Ramassage des déchets",
                            Image = "833d9866-40ea-e0f9-973a-0661f7ff1a61",
                            IsPublic = false,
                            Latitude = 50.46135977534567,
                            Longitude = 4.8742238489005887,
                            Title = "Rue Mazy à Jambes",
                            UserId = 1
                        },
                        new
                        {
                            ActivityId = 3,
                            Date = new DateTime(2022, 12, 1, 10, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6981),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6982),
                            Description = "Ramassage des déchets",
                            Image = "67a2e64b-f155-b710-246e-b7765d16bab0",
                            IsPublic = false,
                            Latitude = 50.459010804528624,
                            Longitude = 4.8634192270445045,
                            Title = "Route Merveilleuse à Namur",
                            UserId = 1
                        },
                        new
                        {
                            ActivityId = 4,
                            Date = new DateTime(2023, 1, 4, 11, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6987),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6988),
                            Description = "Ramassage des déchets",
                            Image = "f379538d-6e67-63c1-d935-8a693a5cfd06",
                            IsPublic = true,
                            Latitude = 50.45831557105943,
                            Longitude = 4.8660996998271129,
                            Title = "Pont de Jambes",
                            UserId = 1
                        },
                        new
                        {
                            ActivityId = 5,
                            Date = new DateTime(2023, 1, 6, 11, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6993),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6995),
                            Description = "Ramassage des déchets",
                            Image = "60cbf3b4-dfe9-d0d3-3d43-43520506cfef",
                            IsPublic = true,
                            Latitude = 50.457072552411546,
                            Longitude = 4.8591006873929858,
                            Title = "Le paranoma Citadelle",
                            UserId = 1
                        },
                        new
                        {
                            ActivityId = 6,
                            Date = new DateTime(2023, 1, 15, 11, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6999),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7001),
                            Description = "Ramassage des déchets",
                            Image = "988d4161-b23e-45f7-4962-1bbaff2d9165",
                            IsPublic = false,
                            Latitude = 50.454912993186618,
                            Longitude = 4.8553943545755427,
                            Title = "Château de Namur",
                            UserId = 1
                        },
                        new
                        {
                            ActivityId = 7,
                            Date = new DateTime(2023, 1, 3, 11, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7005),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7007),
                            Description = "Ramassage des déchets",
                            Image = "b7124b6c-f782-92e5-c1ae-c7ede7984215",
                            IsPublic = true,
                            Latitude = 50.292073135414462,
                            Longitude = 5.0957738631991845,
                            Title = "Centre de Ciney",
                            UserId = 3
                        },
                        new
                        {
                            ActivityId = 8,
                            Date = new DateTime(2023, 1, 8, 11, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7011),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7013),
                            Description = "Ramassage des déchets",
                            Image = "567db65f-1ad9-a52d-72e8-e2c1f0f10fb8",
                            IsPublic = true,
                            Latitude = 50.288714887095047,
                            Longitude = 5.0966957848596559,
                            Title = "Ciney park Saint-Roch",
                            UserId = 3
                        },
                        new
                        {
                            ActivityId = 9,
                            Date = new DateTime(2022, 12, 18, 17, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7017),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7019),
                            Description = "Ramassage des déchets",
                            Image = "80f82e28-8616-27db-4ac6-09a1715c5a76",
                            IsPublic = true,
                            Latitude = 50.195352893252299,
                            Longitude = 4.8369342880655646,
                            Title = "Hastiere grand route",
                            UserId = 3
                        },
                        new
                        {
                            ActivityId = 10,
                            Date = new DateTime(2022, 11, 18, 17, 15, 30, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7024),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7025),
                            Description = "Ramassage des déchets",
                            Image = "342d73c4-0964-da22-90a8-df6ac44766d0",
                            IsPublic = true,
                            Latitude = 50.074736140503816,
                            Longitude = 4.6072779911991404,
                            Title = "Viroinvale",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.ActivityLiked", b =>
                {
                    b.Property<int>("ActivityLikedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityLikedId"), 1L, 1);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActivityLikedId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLikeds");

                    b.HasData(
                        new
                        {
                            ActivityLikedId = 1,
                            ActivityId = 1,
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7046),
                            UserId = 1
                        },
                        new
                        {
                            ActivityLikedId = 2,
                            ActivityId = 1,
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7050),
                            UserId = 2
                        },
                        new
                        {
                            ActivityLikedId = 3,
                            ActivityId = 1,
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7052),
                            UserId = 3
                        },
                        new
                        {
                            ActivityLikedId = 4,
                            ActivityId = 2,
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7055),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.Meeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Image")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MaxParticipant")
                        .HasColumnType("int");

                    b.Property<int>("MinParticipant")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            MeetingId = 1,
                            Date = new DateTime(2023, 2, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7079),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7081),
                            Description = "Rendez-vous en dessous du pont de Sambre à 10h",
                            Image = "d3622751-8931-35cd-545c-55bb673bc105",
                            Latitude = 50.43053889673353,
                            Longitude = 4.6140972122412283,
                            MaxParticipant = 10,
                            MinParticipant = 2,
                            Title = "Sambre de Tamines",
                            UserId = 1
                        },
                        new
                        {
                            MeetingId = 2,
                            Date = new DateTime(2023, 2, 10, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7088),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7090),
                            Description = "Rendez-vous près de la gare à 11h30",
                            Image = "567db65f-1ad9-a52d-72e8-e2c1f0f10fb8",
                            Latitude = 50.291399089228918,
                            Longitude = 5.0914419559866975,
                            MaxParticipant = 12,
                            MinParticipant = 4,
                            Title = "Ciney",
                            UserId = 1
                        },
                        new
                        {
                            MeetingId = 3,
                            Date = new DateTime(2023, 1, 31, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7094),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7096),
                            Description = "Rendez-vous à 8h30",
                            Image = "ef4be8ab-704f-4821-8d79-fcf341f7f498",
                            Latitude = 50.311528901590549,
                            Longitude = 5.1073765406444149,
                            MaxParticipant = 12,
                            MinParticipant = 4,
                            Title = "Ciney Technobel",
                            UserId = 3
                        },
                        new
                        {
                            MeetingId = 4,
                            Date = new DateTime(2022, 12, 15, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7101),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(7102),
                            Description = "Rendez-vous à 10h30 près du grand chêne",
                            Image = "3f779eff-6877-7448-be50-7b1fbf8e1d20",
                            Latitude = 50.41672494682598,
                            Longitude = 4.6242254669166618,
                            MaxParticipant = 12,
                            MinParticipant = 4,
                            Title = "Bois de Falisolle",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.MeetingLiked", b =>
                {
                    b.Property<int>("MeetingLikedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingLikedId"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MeetingLikedId");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetingLikeds");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.MeetingParticipant", b =>
                {
                    b.Property<int>("MeetingParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingParticipantId"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MeetingParticipantId");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetingParticipants");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Pseudo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("MeetingId");

                    b.HasIndex("Pseudo")
                        .IsUnique()
                        .HasFilter("[Pseudo] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6805),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6832),
                            Email = "olivier@gmail.com",
                            Firstname = "Olivier",
                            Image = "aa76be4e-329d-e188-42af-2b5fa2f1260a",
                            Lastname = "B",
                            PasswordHash = new byte[] { 156, 83, 33, 138, 201, 246, 114, 149, 86, 240, 182, 234, 245, 254, 64, 61, 30, 231, 163, 188, 11, 179, 237, 124, 145, 219, 183, 78, 216, 216, 50, 73, 144, 7, 76, 39, 142, 44, 193, 13, 65, 83, 114, 97, 163, 65, 157, 35, 158, 38, 150, 86, 148, 232, 244, 49, 204, 67, 41, 24, 241, 42, 230, 45 },
                            PasswordSalt = new byte[] { 150, 89, 230, 140, 252, 60, 71, 196, 229, 150, 110, 40, 1, 159, 59, 78, 186, 70, 33, 53, 165, 88, 140, 226, 179, 92, 198, 112, 251, 136, 85, 109, 216, 33, 116, 97, 70, 52, 31, 115, 56, 92, 151, 39, 184, 18, 42, 4, 251, 42, 165, 127, 248, 202, 80, 5, 102, 251, 146, 246, 156, 124, 190, 7, 0, 248, 238, 235, 40, 113, 125, 157, 75, 221, 13, 136, 249, 221, 227, 41, 210, 114, 102, 16, 17, 137, 83, 124, 133, 155, 74, 15, 65, 79, 75, 112, 8, 226, 203, 136, 95, 159, 38, 242, 163, 63, 42, 89, 17, 1, 139, 54, 175, 141, 211, 132, 222, 219, 250, 128, 250, 255, 61, 123, 116, 189, 245, 133 },
                            Pseudo = "olivier",
                            Role = "USER"
                        },
                        new
                        {
                            UserId = 2,
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6837),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6838),
                            Email = "philippe@gmail.com",
                            Firstname = "Philippe",
                            Image = "14e155f7-198d-0dda-cb07-7e9ab42b0a46",
                            Lastname = "D",
                            PasswordHash = new byte[] { 178, 234, 29, 158, 86, 0, 12, 166, 98, 216, 149, 86, 108, 146, 109, 249, 21, 106, 76, 133, 182, 143, 241, 42, 226, 2, 199, 138, 32, 171, 46, 26, 100, 16, 169, 237, 134, 222, 181, 235, 119, 158, 58, 196, 24, 160, 24, 219, 172, 77, 81, 199, 74, 178, 221, 79, 145, 138, 26, 170, 178, 66, 150, 55 },
                            PasswordSalt = new byte[] { 131, 247, 167, 74, 151, 76, 205, 62, 229, 121, 45, 4, 11, 3, 19, 213, 135, 76, 170, 203, 136, 210, 127, 138, 56, 74, 75, 252, 34, 221, 47, 252, 140, 207, 62, 213, 178, 153, 215, 192, 198, 18, 222, 134, 251, 205, 219, 199, 157, 126, 97, 236, 209, 18, 43, 251, 194, 202, 139, 117, 210, 137, 101, 109, 157, 189, 131, 112, 84, 92, 170, 203, 80, 34, 48, 74, 186, 84, 162, 7, 151, 88, 33, 4, 15, 46, 75, 148, 0, 144, 30, 23, 239, 249, 205, 65, 120, 60, 143, 70, 73, 49, 247, 187, 180, 251, 141, 214, 118, 26, 61, 143, 199, 117, 253, 115, 121, 235, 199, 251, 164, 95, 127, 130, 224, 12, 181, 25 },
                            Pseudo = "philippe",
                            Role = "USER"
                        },
                        new
                        {
                            UserId = 3,
                            DateCreated = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6841),
                            DateModified = new DateTime(2023, 1, 23, 22, 19, 58, 28, DateTimeKind.Local).AddTicks(6843),
                            Email = "julie@gmail.com",
                            Firstname = "Julie",
                            Image = "9ca30b7b-00e4-0893-9de5-7a65cc10cd8b",
                            Lastname = "H",
                            PasswordHash = new byte[] { 142, 74, 147, 102, 178, 78, 177, 5, 101, 251, 91, 59, 189, 132, 70, 6, 118, 199, 33, 109, 71, 61, 44, 12, 241, 62, 74, 58, 136, 214, 33, 108, 221, 237, 251, 62, 151, 228, 211, 129, 198, 191, 108, 229, 174, 43, 121, 0, 119, 44, 48, 254, 145, 46, 33, 110, 200, 255, 138, 100, 163, 187, 232, 24 },
                            PasswordSalt = new byte[] { 240, 180, 72, 9, 212, 74, 186, 227, 228, 227, 38, 146, 2, 116, 58, 10, 56, 147, 6, 219, 182, 83, 57, 63, 8, 185, 115, 102, 187, 237, 98, 213, 161, 47, 153, 0, 96, 81, 39, 65, 115, 44, 108, 138, 118, 226, 89, 124, 226, 165, 34, 115, 194, 200, 65, 86, 101, 28, 146, 190, 202, 1, 80, 234, 172, 39, 4, 177, 156, 116, 249, 254, 66, 121, 67, 104, 149, 117, 255, 82, 118, 80, 189, 19, 21, 25, 20, 72, 226, 132, 186, 210, 212, 151, 23, 156, 249, 160, 119, 106, 235, 33, 14, 176, 4, 234, 2, 90, 21, 35, 9, 178, 44, 87, 90, 69, 19, 233, 0, 40, 87, 106, 233, 222, 172, 94, 206, 150 },
                            Pseudo = "julie",
                            Role = "USER"
                        });
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.Activity", b =>
                {
                    b.HasOne("MakerHUB.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.ActivityLiked", b =>
                {
                    b.HasOne("MakerHUB.DAL.Entities.Activity", "Activity")
                        .WithMany("ActivityLikeds")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakerHUB.DAL.Entities.User", "User")
                        .WithMany("LikeActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.Meeting", b =>
                {
                    b.HasOne("MakerHUB.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.MeetingLiked", b =>
                {
                    b.HasOne("MakerHUB.DAL.Entities.Meeting", "Meeting")
                        .WithMany("MeetingLikeds")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakerHUB.DAL.Entities.User", "User")
                        .WithMany("MeetingLikeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.MeetingParticipant", b =>
                {
                    b.HasOne("MakerHUB.DAL.Entities.Meeting", "Meeting")
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MakerHUB.DAL.Entities.User", "User")
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.User", b =>
                {
                    b.HasOne("MakerHUB.DAL.Entities.Meeting", null)
                        .WithMany("Users")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.Activity", b =>
                {
                    b.Navigation("ActivityLikeds");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.Meeting", b =>
                {
                    b.Navigation("MeetingLikeds");

                    b.Navigation("MeetingParticipants");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MakerHUB.DAL.Entities.User", b =>
                {
                    b.Navigation("LikeActivities");

                    b.Navigation("MeetingLikeds");

                    b.Navigation("MeetingParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
